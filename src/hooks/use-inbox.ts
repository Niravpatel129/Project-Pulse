import { newRequest } from '@/utils/newRequest';
import { useInfiniteQuery } from '@tanstack/react-query';
import { useParams } from 'next/navigation';

interface EmailParticipant {
  id: number;
  avatar_type: string;
  class: string;
  source: string;
  url: string;
  namespace: string;
  name: string;
  card_name: string;
  handle: string;
  email: string | null;
  display_name: string;
  description: string | null;
  avatar: string;
  initials: string;
  channel_id: number | null;
  channel_full: {
    id: number;
    type: string;
    namespace: string;
    is_private: boolean;
    avatar_type: string;
    class: string;
    message_type: string;
    type_name: string;
    contact_source: string;
    url: string;
    display_name: string;
    address: string;
    send_as: string;
    two_way_sync: boolean;
    slowlaned: boolean;
    sync_status: string;
    account_status: string;
    primed: boolean;
    error_type: string | null;
    settings: Record<string, any>;
    deliv_settings: Record<string, any>;
    defer_rate: number;
    is_missing_calendar_scopes: boolean;
    is_sandbox: boolean;
    created_at: number;
    updated_at: number;
    inbox_id: number;
    inbox_alias: string;
    inbox_name: string;
    owner: string | null;
    error_desc: string | null;
    webhook_url_in: string;
    api_url: string;
    properties: Record<string, any>;
  } | null;
  inbox_alias: string | null;
  message_type: string | null;
  card_id: number;
  card_url: string;
  links: any[];
  num_notes: number;
  extra: {
    email: string | null;
  };
  card: {
    id: number;
    namespace: string;
    avatar_type: string;
    class: string;
    url: string;
    name: string;
    display_name: string;
    avatar: string;
    initials: string;
    color: string;
    num_notes: number;
    namespace_to_num_notes: Record<string, number>;
    autogenerated: boolean;
    edited: boolean;
    created_at: number;
    updated_at: number;
    type: string;
    bio: string | null;
    description: string | null;
    links: any[];
    groups: any[];
    external_info: any;
    custom_field_attributes: any[];
    contacts: Array<{
      id: number;
      url: string;
      source: string;
      handle: string;
    }>;
  };
  fallback: any;
  role: 'from' | 'to' | 'cc' | 'bcc';
  is_spammer: boolean;
  recipient_url: string;
}

interface EmailBody {
  text: string;
  html: string;
}

interface Attachment {
  filename: string;
  mimeType: string;
  size: number;
  attachmentId: string;
  storageUrl: string;
}

interface Token {
  accessToken: string;
  refreshToken: string;
  expiryDate: string;
  scope: string;
}

interface Participant {
  email: string;
  name: string;
  role: 'sender' | 'recipient';
  isInternal: boolean;
  lastInteraction: string;
}

interface LatestMessage {
  content: string;
  sender: string;
  timestamp: string;
  type: string;
}

interface InboxThread {
  latestMessage: LatestMessage;
  messageCount: number;
  _id: string;
  threadId: string;
  workspaceId: string;
  title: string;
  subject: string;
  participants: Participant[];
  emails: string[];
  status: string;
  priority: string;
  lastActivity: string;
  isRead: boolean;
  isStarred: boolean;
  isPinned: boolean;
  customFields: Record<string, any>;
  metadata: Record<string, any>;
  labels: string[];
  notes: any[];
  createdAt: string;
  updatedAt: string;
  __v: number;
  messageReferences: any[];
}

interface PaginatedResponse {
  success: boolean;
  data: InboxThread[];
  pagination: {
    total: number;
    page: number;
    pages: number;
    limit: number;
  };
}

const fetchInboxThreads = async ({
  pageParam = 1,
  stage,
}: {
  pageParam?: number;
  stage: string;
}): Promise<PaginatedResponse> => {
  const { data } = await newRequest.get('/inbox', {
    params: {
      stage: stage,
      page: pageParam,
      limit: 10,
    },
  });
  return data;
};

export const useInbox = () => {
  const params = useParams();
  const stage = (params.state as string) || 'unassigned';

  return useInfiniteQuery({
    queryKey: ['inbox-threads', stage] as const,
    queryFn: ({ pageParam }) => {
      return fetchInboxThreads({ pageParam, stage });
    },
    getNextPageParam: (lastPage) => {
      if (lastPage.pagination.page < lastPage.pagination.pages) {
        return lastPage.pagination.page + 1;
      }
      return undefined;
    },
    initialPageParam: 1,
  });
};
