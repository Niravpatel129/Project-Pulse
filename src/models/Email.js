import mongoose from 'mongoose';

const recipientSchema = new mongoose.Schema({
  id: Number,
  avatar_type: String,
  class: String,
  source: String,
  url: String,
  namespace: String,
  name: String,
  card_name: String,
  handle: String,
  email: String,
  display_name: String,
  description: String,
  avatar: String,
  initials: String,
  channel_id: Number,
  channel_full: {
    id: Number,
    type: String,
    namespace: String,
    is_private: Boolean,
    avatar_type: String,
    class: String,
    message_type: String,
    type_name: String,
    contact_source: String,
    url: String,
    display_name: String,
    address: String,
    send_as: String,
    two_way_sync: Boolean,
    slowlaned: Boolean,
    sync_status: String,
    account_status: String,
    primed: Boolean,
    error_type: String,
    settings: mongoose.Schema.Types.Mixed,
    deliv_settings: mongoose.Schema.Types.Mixed,
    defer_rate: Number,
    is_missing_calendar_scopes: Boolean,
    is_sandbox: Boolean,
    created_at: Number,
    updated_at: Number,
    inbox_id: Number,
    inbox_alias: String,
    inbox_name: String,
    owner: String,
    error_desc: String,
    webhook_url_in: String,
    api_url: String,
    properties: mongoose.Schema.Types.Mixed,
  },
  inbox_alias: String,
  message_type: String,
  card_id: Number,
  card_url: String,
  links: [mongoose.Schema.Types.Mixed],
  num_notes: Number,
  extra: {
    email: String,
  },
  card: {
    id: Number,
    namespace: String,
    avatar_type: String,
    class: String,
    url: String,
    name: String,
    display_name: String,
    avatar: String,
    initials: String,
    color: String,
    num_notes: Number,
    namespace_to_num_notes: mongoose.Schema.Types.Mixed,
    autogenerated: Boolean,
    edited: Boolean,
    created_at: Number,
    updated_at: Number,
    type: String,
    bio: String,
    description: String,
    links: [mongoose.Schema.Types.Mixed],
    groups: [mongoose.Schema.Types.Mixed],
    external_info: mongoose.Schema.Types.Mixed,
    custom_field_attributes: [mongoose.Schema.Types.Mixed],
    contacts: [
      {
        id: Number,
        url: String,
        source: String,
        handle: String,
      },
    ],
  },
  fallback: mongoose.Schema.Types.Mixed,
  role: {
    type: String,
    enum: ['from', 'to', 'cc', 'bcc'],
  },
  is_spammer: Boolean,
  recipient_url: String,
});

const emailSchema = new mongoose.Schema(
  {
    workspaceId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Workspace',
      required: true,
    },
    gmailMessageId: String,
    threadId: String,
    userId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
      required: true,
    },
    from: recipientSchema,
    to: [recipientSchema],
    cc: [recipientSchema],
    bcc: [recipientSchema],
    subject: String,
    body: {
      text: String,
      html: String,
    },
    labels: [String],
    snippet: String,
    internalDate: String,
    attachments: [
      {
        filename: String,
        mimeType: String,
        size: Number,
        attachmentId: String,
        storageUrl: String,
      },
    ],
    isRead: {
      type: Boolean,
      default: false,
    },
    historyId: String,
    threadPart: Number,
    messageSource: String,
    rawHeaders: mongoose.Schema.Types.Mixed,
    token: {
      accessToken: String,
      refreshToken: String,
      expiryDate: String,
      scope: String,
    },
    syncedAt: Date,
    createdAt: {
      type: Date,
      default: Date.now,
    },
    updatedAt: {
      type: Date,
      default: Date.now,
    },
  },
  {
    timestamps: true,
  },
);

// Indexes for better query performance
emailSchema.index({ workspaceId: 1, threadId: 1 });
emailSchema.index({ workspaceId: 1, userId: 1 });
emailSchema.index({ workspaceId: 1, isRead: 1 });
emailSchema.index({ workspaceId: 1, createdAt: -1 });

const Email = mongoose.models.Email || mongoose.model('Email', emailSchema);

export default Email;
